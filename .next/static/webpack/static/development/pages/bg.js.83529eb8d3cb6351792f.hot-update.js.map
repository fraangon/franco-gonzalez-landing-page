{"version":3,"file":"static/webpack/static/development/pages/bg.js.83529eb8d3cb6351792f.hot-update.js","sources":["webpack:///./components/home/home/home.js"],"sourcesContent":["import styles from './home.module.css'\nimport MotionAnimation from '../motion_animation/motion_animation'\nimport WebAnimation from '../web_animation/web_animation'\nimport { motion } from 'framer-motion';\nimport { getWindowWidth, getWindowHeight } from '../../window/window_dimensions.js';\nimport { useState, useEffect } from \"react\";\nimport dynamic from 'next/dynamic'\nimport ParallaxMousemove from 'react-parallax-mousemove'\n\nconst Frame = dynamic( () => import('framer').then((mod) => mod.Frame), { ssr: false } );\n\nconst easing = [0.6, -0.05, 0.01, 0.99];\n\nconst animationName = {\n  initial: {\n    x: -60,\n    opacity: 0\n  },\n  animate: {\n    x: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.9,\n      ease: easing,\n      delay: 0,\n    },\n  },\n  exit: { \n    x: 0,\n    opacity: 0\n  }\n}\n\nconst animationMotion = {\n  initial: {\n    x: -60,\n    opacity: 0\n  },\n  animate: {\n    x: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.9,\n      ease: easing,\n      delay: 0.2,\n    },\n  },\n  exit: { \n    x: 0,\n    opacity: 0\n  }\n}\n\nconst animationWeb = {\n  initial: {\n    x: -60,\n    opacity: 0\n  },\n  animate: {\n    x: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.9,\n      ease: easing,\n      delay: 0.4,\n    },\n  },\n  exit: { \n    x: 0,\n    opacity: 0\n  }\n}\n\nconst animationBG = {\n  initial: {\n    scale: 1.2,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.1,\n      ease: easing\n    }\n  },\n  exit: { \n    scale: 0.95,\n    opacity: 0\n  }\n}\n\nconst stagger = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n}\n\nexport default function Home({ children, home }) {\n  \n  const [ssrDone, setSsrDone ] = useState(false);\n    \n  useEffect(() => {\n      setSsrDone(true)\n      }, [])\n  \n  const widthBg = getWindowHeight() * ( 7680/4320 )\n  const heightBg = getWindowHeight()\n\n  const style = {\n      outter: {\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          width:'100%',\n          position: 'relative',\n          overflow: 'hidden',\n          marginLeft: 'auto',\n          marginRigth: 'auto'\n        },\n        infoLayerStyle: {\n          position: 'relative',\n        },\n        bgLayerStyle: {\n          position: 'absolute',\n          height: '100%',\n        }\n    }\n  \n    if(ssrDone) {\n      return(\n          <div>\n\n            <Frame>\n                \n                <div \n                  className={styles.contaner_fix_pos}\n                >\n\n                  <div \n                    className={styles.home}\n                  >\n                    <motion.div\n                      variants={stagger}\n                      animate='animate'\n                    >\n                      <motion.div \n                      exit='exit'\n                      initial='initial'\n                      animate='animate'\n                      variants={animationName}\n                      className={styles.title}\n                      >\n                          <h2 className={styles.title_regular}>I,m </h2>\n                          <h1 className={styles.title_bold}>Franco</h1>\n                          <h1 className={styles.title_bold}>Gonzalez</h1>\n                          <h2 className={styles.title_regular}> .</h2>\n                      </motion.div>\n\n                      <motion.div\n                        exit='exit'\n                        initial='initial'\n                        animate='animate'\n                        variants={animationMotion}\n                      >\n                        <MotionAnimation/>\n                      </motion.div>\n\n                      <motion.div\n                        exit='exit'\n                        initial='initial'\n                        animate='animate'\n                        variants={animationWeb}\n                      >\n                        <WebAnimation/>\n                      </motion.div>\n\n                    </motion.div>\n                  </div>\n                </div>\n\n              </Frame>\n\n              <ParallaxMousemove containerStyle={style.outter} fullHeight={true}>\n              \n                  <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                      xFactor: -0.03,\n                      yFactor: 0.03,\n                      springSettings: {\n                          stiffness: 150,\n                          damping: 50\n                      }\n                  }}>\n                      <Frame\n                          height={ heightBg } \n                          width={ widthBg } \n                          top={0} \n                          left={ (getWindowWidth() - widthBg) / 2 } \n                          image='/background_parallax/shadow.png'\n                          style={{\n                              backgroundColor: 'rgba(0, 0, 0, 0)',\n                              mixBlendMode: \"multiply\"\n                          }}\n                      />\n                  </ParallaxMousemove.Layer>\n\n                  <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                      xFactor: 0.05,\n                      yFactor: -0.03,\n                      springSettings: {\n                          stiffness: 150,\n                          damping: 50\n                      }\n                      }}>\n              \n                      <Frame\n                          height={getWindowHeight()} \n                          width={ getWindowHeight() * ( 7680/4320 ) } \n                          top={0}\n                          left={ (getWindowWidth() - widthBg) / 2 } \n                          image='/background_parallax/layer_3.png'\n                          style={{ \n                              backgroundColor: 'rgba(0, 0, 0, 0)'\n                          }}\n                      />\n\n                  </ParallaxMousemove.Layer>\n                  \n                  <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                      xFactor: 0.10,\n                      yFactor: -0.06,\n                      springSettings: {\n                          stiffness: 150,\n                          damping: 50\n                      }\n                  }}>\n\n                      <Frame\n                          height={getWindowHeight()} \n                          width={ getWindowHeight() * ( 7680/4320 ) } \n                          top={0} \n                          left={ (getWindowWidth() - widthBg) / 2 }  \n                          image='/background_parallax/layer_2.png'\n                          style={{ \n                              backgroundColor: 'rgba(0, 0, 0, 0)'\n                          }}\n                      />\n\n                  </ParallaxMousemove.Layer>\n                  \n                  <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                      xFactor: 0.15,\n                      yFactor: -0.09,\n                      springSettings: {\n                          stiffness: 150,\n                          damping: 50\n                      }\n                  }}>\n\n                      <Frame\n                          height={getWindowHeight()} \n                          width={ getWindowHeight() * ( 7680/4320 ) } \n                          top={0}  \n                          left={ (getWindowWidth() - widthBg) / 2 } \n                          image='/background_parallax/layer_1.png'\n                          style={{ \n                              backgroundColor:'rgba(0, 0, 0, 0)'\n                          }}\n                      />\n\n                  </ParallaxMousemove.Layer>\n\n              </ParallaxMousemove> \n          </div>\n      )\n  } \n  return (<div>Loading...</div>)\n  \n\n    \n  }"],"mappings":"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","sourceRoot":""}