{"version":3,"file":"static/webpack/static/development/pages/projects.js.1da953bee1ccdaf7eb0d.hot-update.js","sources":["webpack:///./components/home/bg/bg.js","webpack:///./components/projects/projects_items/projects_items.js"],"sourcesContent":["import { getWindowWidth, getWindowHeight } from '../../window/window_dimensions.js';\nimport { useState, useEffect } from \"react\";\nimport dynamic from 'next/dynamic'\nimport ParallaxMousemove from 'react-parallax-mousemove'\nimport { motion } from 'framer-motion';\nimport {animationBG} from './bg_animation';\n\nconst Frame = dynamic( () => import('framer').then((mod) => mod.Frame), { ssr: false } );\n\n\nexport default function Bg() {\n    const [ssrDone, setSsrDone ] = useState(false);\n    \n    useEffect(() => {\n        setSsrDone(true)\n        }, [])\n    \n    const widthBg = getWindowHeight() * ( 7680/4320 )\n    const heightBg = getWindowHeight()\n    \n    // Styles for the mouse paralax efect\n    const style = {\n        outter: {\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n            width:'100%',\n            position: 'relative',\n            overflow: 'hidden',\n            marginLeft: 'auto',\n            marginRigth: 'auto',\n            pointerEvents: 'none'\n          },\n          infoLayerStyle: {\n            position: 'relative',\n          },\n          bgLayerStyle: {\n            position: 'absolute',\n            height: '100%',\n          }\n      }\n    \n\n    if(ssrDone) {\n        \n\n        return(\n            <motion.div\n                exit='exit'\n                initial='initial'\n                animate='animate'\n                variants={animationBG}\n            >\n                <ParallaxMousemove containerStyle={style.outter} fullHeight={true}>\n                \n                    <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                        xFactor: -0.03,\n                        yFactor: 0.03,\n                        springSettings: {\n                            stiffness: 150,\n                            damping: 50\n                        }\n                    }}>\n                        <Frame\n                            height={ heightBg } \n                            width={ widthBg } \n                            top={0} \n                            left={ (getWindowWidth() - widthBg) / 2 } \n                            image='/background_parallax/shadow.png'\n                            style={{\n                                backgroundColor: 'rgba(0, 0, 0, 0)',\n                                mixBlendMode: \"multiply\"\n                            }}\n                        />\n                    </ParallaxMousemove.Layer>\n\n                    <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                        xFactor: 0.05,\n                        yFactor: -0.03,\n                        springSettings: {\n                            stiffness: 150,\n                            damping: 50\n                        }\n                        }}>\n                \n                        <Frame\n                            height={getWindowHeight()} \n                            width={ getWindowHeight() * ( 7680/4320 ) } \n                            top={0}\n                            left={ (getWindowWidth() - widthBg) / 2 } \n                            image='/background_parallax/layer_3.png'\n                            style={{ \n                                backgroundColor: 'rgba(0, 0, 0, 0)'\n                            }}\n                        />\n\n                    </ParallaxMousemove.Layer>\n                    \n                    <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                        xFactor: 0.10,\n                        yFactor: -0.06,\n                        springSettings: {\n                            stiffness: 150,\n                            damping: 50\n                        }\n                    }}>\n\n                        <Frame\n                            height={getWindowHeight()} \n                            width={ getWindowHeight() * ( 7680/4320 ) } \n                            top={0} \n                            left={ (getWindowWidth() - widthBg) / 2 }  \n                            image='/background_parallax/layer_2.png'\n                            style={{ \n                                backgroundColor: 'rgba(0, 0, 0, 0)'\n                            }}\n                        />\n\n                    </ParallaxMousemove.Layer>\n                    \n                    <ParallaxMousemove.Layer layerStyle={style.bgLayerStyle} config={{\n                        xFactor: 0.15,\n                        yFactor: -0.09,\n                        springSettings: {\n                            stiffness: 150,\n                            damping: 50\n                        }\n                    }}>\n\n                        <Frame\n                            height={getWindowHeight()} \n                            width={ getWindowHeight() * ( 7680/4320 ) } \n                            top={0}  \n                            left={ (getWindowWidth() - widthBg) / 2 } \n                            image='/background_parallax/layer_1.png'\n                            style={{ \n                                backgroundColor:'rgba(0, 0, 0, 0)'\n                            }}\n                        />\n\n                    </ParallaxMousemove.Layer>\n\n                </ParallaxMousemove> \n            </motion.div>\n        )\n    } \n    return (<div>Loading...</div>)\n}\n\n/*\n\n*/","import styles from './projects_items.module.css'\nimport dynamic from 'next/dynamic'\nimport {posts} from '../../../posts/posts.js'\nimport { useState, useEffect } from \"react\";\nimport { getWindowWidth, getWindowHeight } from '../../window/window_dimensions.js';\n// import { useMotionValue } from \"framer\";\n\nconst Frame = dynamic( () => import('framer').then((mod) => mod.Frame), { ssr: false } );\nconst Stack = dynamic( () => import('framer').then((mod) => mod.Stack), { ssr: false } );\n//const useMotionValue = dynamic( () => import('framer').then((mod) => mod.useMotionValue), { ssr: false } );\n\n\nexport default function ProjectsItems() { \n  \n  const [ssrDone, setSsrDone ] = useState(false);\n    \n  useEffect(() => {\n      setSsrDone(true)\n  }, [])\n\n  // width consts\n  const widthLayer = Math.min( getWindowWidth(), 1920 )\n  const widthItem = ( 40 * 0.01 * getWindowHeight() );\n  const widthItemAndGap = widthItem + 40;\n  const lengthItems = posts.length;\n  const widthSliderTotal = ( (lengthItems-1) * widthItemAndGap + widthItem)\n\n  // slider controller\n  const [xOffset, setXOffset] = React.useState(0);\n  \n  \n  if(ssrDone) {\n    let position = useMotionValue(0);\n\n    return ( <div>\n        <Frame\n          name={\"Mask\"}\n          overflow={\"hidden\"}\n          height= '50vh'\n          width= {widthLayer - 200}\n          x={-100}\n          backgroundColor='#200a48'\n        >\n\n          <Stack \n            size={100} \n            direction=\"horizontal\" \n            alignment=\"start\" \n            gap='40' \n            distribution=\"start\"  \n            x={ (100) + ( -0 * (40 + widthItem)) }\n          >\n\n            {posts.map(aPost => ( \n              <Frame key={aPost.title} backgroundColor='#180233' height={'50vh'} width={'40vh'} className={styles.project_item}>\n                \n                <div className={styles.project_item_text}>\n                <h3>{aPost.title}</h3>\n                <h4>{aPost.type}</h4>\n                </div>\n\n                <img src='/Min_projects.png' alt='min' className={styles.img_min}></img>\n\n            </Frame>\n            ))}\n\n          </Stack>\n        </Frame>\n\n        <Frame\n          name={\"Mask Izq\"}\n          width= {120}\n          backgroundColor='#200a48'\n          height= '55vh'\n          x={-180}\n          y='-2.5vh'\n          style={{\n            filter: 'blur(15px)',\n          }}\n        />\n\n        <Frame\n          name={\"Mask Der\"}\n          width= {120}\n          backgroundColor='#200a48'\n          height= '55vh'\n          x={ widthLayer - 340 }\n          y='-2.5vh'\n          style={{\n            filter: 'blur(15px)',\n          }}\n        />\n        \n        <Frame \n            name={'Rail'}\n            width={ widthLayer - 400 }\n            height={'1.6vh'}\n            radius={0}\n            position={\"relative\"}\n            left={'0px'}\n            background={\"rgba(255,255,255,.1)\"}\n            top={'55vh'}\n        >\n            <Frame\n                name={'Knob'}\n                width={'8%'}\n                height={'1.6vh'}\n                radius={0}\n                position={\"relative\"}\n                left={'0%'}\n                background={\"rgba(255,255,255,.1)\"}\n                drag={\"x\"}\n                dragConstraints={{ \n                left: 0, \n                right:  (widthLayer - 400) * 0.92\n                }}\n                dragElastic={0}\n                dragMomentum={false}\n                x={0}\n            ></Frame>\n        </Frame>\n\n        </div>);\n\n\n  } \n  return (<div> Loading... </div>)\n  \n}\n\n/*\n{items.map(aItem => (\n        \n        <Frame key={aItem.name} backgroundColor='#180233' height={'50vh'} width={'40vh'} className={styles.project_item}>\n        \n            \n            <div className={styles.project_item_text}>\n            <h3>{aItem.name}</h3>\n            <h4>{aItem.type}</h4>\n            </div>\n\n            <img src='/Min_projects.png' alt='min' className={styles.img_min}></img>\n\n        </Frame>\n            \n        ))}\n\n*/"],"mappings":"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","sourceRoot":""}