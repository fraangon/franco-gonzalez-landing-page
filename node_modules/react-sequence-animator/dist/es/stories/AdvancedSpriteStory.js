import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
/* eslint-disable */
import React from 'react';
import Button from 'wix-style-react/Button';
import SpriteAnimator from '../src/SpriteAnimator';
import { storiesOf } from '@storybook/react';

var sprite = require('./statics/CSV_Export_Sprite.png');
var WIDTH = 300;
var HEIGHT = 150;
var ANIMATION_TYPES = {
  EXPORT: 'export',
  ERROR: 'error',
  SUCCESS: 'success'
};

var AdvancedSpriteStory = function (_React$Component) {
  _inherits(AdvancedSpriteStory, _React$Component);

  function AdvancedSpriteStory() {
    _classCallCheck(this, AdvancedSpriteStory);

    var _this = _possibleConstructorReturn(this, (AdvancedSpriteStory.__proto__ || _Object$getPrototypeOf(AdvancedSpriteStory)).call(this));

    _this._elRef = function (el) {
      _this._elem = el;
    };

    _this._getPosition = function (frame) {
      var type = _this.state.type;

      var top = frame % 24 * HEIGHT;
      var left = 0;

      switch (type) {
        case ANIMATION_TYPES.ERROR:
          left = 2 * WIDTH;
          break;
        case ANIMATION_TYPES.SUCCESS:
          left = WIDTH;
          break;
      }

      return {
        width: WIDTH,
        height: HEIGHT,
        top: top,
        left: left
      };
    };

    _this._onSequenceEnd = function () {
      var updateTo = _this.state.updateTo;


      if (updateTo) {
        _this.setState({ type: updateTo, updateTo: null });
      }
    };

    _this._onError = function () {
      _this.setState({ updateTo: ANIMATION_TYPES.ERROR });
    };

    _this._onSuccess = function () {
      _this.setState({ updateTo: ANIMATION_TYPES.SUCCESS });
    };

    _this._reset = function () {
      if (_this._elem) {
        _this._elem.stop();
        _this._elem.reset();
      }
      _this.setState({ type: ANIMATION_TYPES.EXPORT }, function () {
        if (_this._elem) {
          _this._elem.start();
        }
      });
    };

    _this.state = {
      type: ANIMATION_TYPES.EXPORT,
      updateTo: null
    };
    return _this;
  }

  _createClass(AdvancedSpriteStory, [{
    key: 'render',
    value: function render() {
      var type = this.state.type;


      return React.createElement(
        'div',
        { style: { display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' } },
        React.createElement(
          SpriteAnimator,
          {
            autoplay: true,
            duration: 800,
            numOfFrames: 24,
            getPosition: this._getPosition,
            loop: type === ANIMATION_TYPES.EXPORT,
            onSequenceEnd: this._onSequenceEnd,
            ref: this._elRef
          },
          React.createElement('img', { src: sprite, alt: '1', width: WIDTH * 3, height: HEIGHT * 24 })
        ),
        React.createElement(
          'div',
          { style: { marginTop: 10, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' } },
          React.createElement(
            'span',
            { style: { marginBottom: 6 } },
            React.createElement(
              Button,
              { height: 'small', onClick: this._onError, disabled: type !== ANIMATION_TYPES.EXPORT },
              'Error'
            )
          ),
          React.createElement(
            'span',
            { style: { marginBottom: 6 } },
            React.createElement(
              Button,
              { height: 'small', onClick: this._onSuccess, disabled: type !== ANIMATION_TYPES.EXPORT },
              'Success'
            )
          ),
          React.createElement(
            'span',
            null,
            React.createElement(
              Button,
              { height: 'small', onClick: this._reset, disabled: type === ANIMATION_TYPES.EXPORT },
              'Reset'
            )
          )
        )
      );
    }
  }]);

  return AdvancedSpriteStory;
}(React.Component);

storiesOf('Animations').add('Advanced Sprite Animator', function () {
  return React.createElement(AdvancedSpriteStory, null);
});
/* eslint-enable */