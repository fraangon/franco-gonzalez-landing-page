import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import SpriteAnimator from '../src/SpriteAnimator';
import AnimationStory from './AnimationStory';
import { storiesOf } from '@storybook/react';

var sprite = require('./statics/sprites-cat-running.png');
var WIDTH = 512;
var HEIGHT = 256;

var SpriteAnimatorStory = function (_React$Component) {
  _inherits(SpriteAnimatorStory, _React$Component);

  function SpriteAnimatorStory() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SpriteAnimatorStory);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SpriteAnimatorStory.__proto__ || _Object$getPrototypeOf(SpriteAnimatorStory)).call.apply(_ref, [this].concat(args))), _this), _this._getPosition = function (frame) {
      return {
        width: WIDTH,
        height: HEIGHT,
        top: frame < 4 ? 0 : HEIGHT,
        left: frame % 4 * WIDTH
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SpriteAnimatorStory, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        AnimationStory,
        null,
        React.createElement(
          SpriteAnimator,
          { autoplay: true, numOfFrames: 8, getPosition: this._getPosition },
          React.createElement('img', { src: sprite, alt: '1', width: WIDTH * 4, height: HEIGHT * 2 })
        )
      );
    }
  }]);

  return SpriteAnimatorStory;
}(React.Component);

storiesOf('Animations', module).add('Sprite Animator', function () {
  return React.createElement(SpriteAnimatorStory, null);
});