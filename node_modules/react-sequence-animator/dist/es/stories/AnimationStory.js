import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp;

import React from 'react';
import PropTypes from 'prop-types';

var AnimationStory = (_temp = _class = function (_React$Component) {
  _inherits(AnimationStory, _React$Component);

  function AnimationStory(props) {
    _classCallCheck(this, AnimationStory);

    var _this = _possibleConstructorReturn(this, (AnimationStory.__proto__ || _Object$getPrototypeOf(AnimationStory)).call(this, props));

    _this._elemRef = function (el) {
      _this._elem = el;
    };

    _this._onStop = function () {
      var isRunning = _this.state.isRunning;


      if (_this._elem) {
        if (isRunning) {
          _this._elem.stop();
        } else {
          _this._elem.start();
        }
      }

      _this.setState({ isRunning: !isRunning });
    };

    _this._onReset = function () {
      if (_this._elem) {
        _this._elem.reset();
      }
    };

    _this._onDurationChange = function (e) {
      var target = e.target;

      _this.setState({ duration: target.value });
    };

    _this.state = {
      duration: props.duration || 600,
      isRunning: true
    };
    return _this;
  }

  _createClass(AnimationStory, [{
    key: 'render',
    value: function render() {
      var _state = this.state,
          duration = _state.duration,
          isRunning = _state.isRunning;
      var _props = this.props,
          children = _props.children,
          showReset = _props.showReset;

      var btnText = isRunning ? 'Pause' : 'Play';

      return React.createElement(
        'div',
        null,
        React.cloneElement(React.Children.only(children), { ref: this._elemRef, duration: Number(duration) }),
        React.createElement(
          'div',
          null,
          React.createElement(
            'label',
            { htmlFor: 'duration' },
            'Duration:'
          ),
          React.createElement('input', { type: 'number', value: duration, onChange: this._onDurationChange })
        ),
        React.createElement(
          'div',
          null,
          React.createElement('input', { style: { width: '120px' }, type: 'button', value: btnText, onClick: this._onStop })
        ),
        React.createElement(
          'div',
          null,
          React.createElement('input', { style: { width: '120px' }, type: 'button', value: 'Reset to start', disabled: !showReset && isRunning, onClick: this._onReset })
        )
      );
    }
  }]);

  return AnimationStory;
}(React.Component), _class.displayName = 'AnimationStory', _class.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  showReset: PropTypes.bool,
  duration: PropTypes.number
}, _temp);
export { AnimationStory as default };